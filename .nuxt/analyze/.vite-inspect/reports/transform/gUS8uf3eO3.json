{
  "resolvedId": "D:/Projects/Web Dev/fu-mission-board-nuxt/node_modules/markdown-it/lib/rules_block/html_block.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// HTML block\n\nimport block_names from '../common/html_blocks.mjs'\nimport { HTML_OPEN_CLOSE_TAG_RE } from '../common/html_re.mjs'\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nconst HTML_SEQUENCES = [\n  [/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true],\n  [/^<!--/,        /-->/,   true],\n  [/^<\\?/,         /\\?>/,   true],\n  [/^<![A-Z]/,     />/,     true],\n  [/^<!\\[CDATA\\[/, /\\]\\]>/, true],\n  [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true],\n  [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false]\n]\n\nexport default function html_block (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (!state.md.options.html) { return false }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n  let lineText = state.src.slice(pos, max)\n\n  let i = 0\n  for (; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break }\n  }\n  if (i === HTML_SEQUENCES.length) { return false }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2]\n  }\n\n  let nextLine = startLine + 1\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine]\n      max = state.eMarks[nextLine]\n      lineText = state.src.slice(pos, max)\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++ }\n        break\n      }\n    }\n  }\n\n  state.line = nextLine\n\n  const token   = state.push('html_block', '', 0)\n  token.map     = [startLine, nextLine]\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true)\n\n  return true\n}\n",
      "start": 1711659332393,
      "end": 1711659332421,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711659332421,
      "end": 1711659332421,
      "order": "normal"
    }
  ]
}

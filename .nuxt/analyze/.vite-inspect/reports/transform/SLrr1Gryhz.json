{
  "resolvedId": "D:/Projects/Web Dev/fu-mission-board-nuxt/node_modules/markdown-it/lib/rules_inline/emphasis.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Process *this* and _that_\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction emphasis_tokenize (state, silent) {\n  const start = state.pos\n  const marker = state.src.charCodeAt(start)\n\n  if (silent) { return false }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false }\n\n  const scanned = state.scanDelims(state.pos, marker === 0x2A)\n\n  for (let i = 0; i < scanned.length; i++) {\n    const token = state.push('text', '', 0)\n    token.content = String.fromCharCode(marker)\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token: state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end: -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open: scanned.can_open,\n      close: scanned.can_close\n    })\n  }\n\n  state.pos += scanned.length\n\n  return true\n}\n\nfunction postProcess (state, delimiters) {\n  const max = delimiters.length\n\n  for (let i = max - 1; i >= 0; i--) {\n    const startDelim = delimiters[i]\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue\n    }\n\n    const endDelim = delimiters[startDelim.end]\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    const isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               // check that first two markers match and adjacent\n               delimiters[i - 1].marker === startDelim.marker &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               // check that last two markers are adjacent (we can safely assume they match)\n               delimiters[startDelim.end + 1].token === endDelim.token + 1\n\n    const ch = String.fromCharCode(startDelim.marker)\n\n    const token_o   = state.tokens[startDelim.token]\n    token_o.type    = isStrong ? 'strong_open' : 'em_open'\n    token_o.tag     = isStrong ? 'strong' : 'em'\n    token_o.nesting = 1\n    token_o.markup  = isStrong ? ch + ch : ch\n    token_o.content = ''\n\n    const token_c   = state.tokens[endDelim.token]\n    token_c.type    = isStrong ? 'strong_close' : 'em_close'\n    token_c.tag     = isStrong ? 'strong' : 'em'\n    token_c.nesting = -1\n    token_c.markup  = isStrong ? ch + ch : ch\n    token_c.content = ''\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = ''\n      state.tokens[delimiters[startDelim.end + 1].token].content = ''\n      i--\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction emphasis_post_process (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  postProcess(state, state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters)\n    }\n  }\n}\n\nexport default {\n  tokenize: emphasis_tokenize,\n  postProcess: emphasis_post_process\n}\n",
      "start": 1711660237083,
      "end": 1711660237108,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711660237108,
      "end": 1711660237108,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    }
  ]
}

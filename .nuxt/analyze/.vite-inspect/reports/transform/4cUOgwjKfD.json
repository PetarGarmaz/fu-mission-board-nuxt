{
  "resolvedId": "D:/Projects/Web Dev/fu-mission-board-nuxt/node_modules/markdown-it/lib/rules_inline/state_inline.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Inline parser state\n\nimport Token from '../token.mjs'\nimport { isWhiteSpace, isPunctChar, isMdAsciiPunct } from '../common/utils.mjs'\n\nfunction StateInline (src, md, env, outTokens) {\n  this.src = src\n  this.env = env\n  this.md = md\n  this.tokens = outTokens\n  this.tokens_meta = Array(outTokens.length)\n\n  this.pos = 0\n  this.posMax = this.src.length\n  this.level = 0\n  this.pending = ''\n  this.pendingLevel = 0\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {}\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = []\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = []\n\n  // backtick length => last seen position\n  this.backticks = {}\n  this.backticksScanned = false\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0\n}\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  const token = new Token('text', '', 0)\n  token.content = this.pending\n  token.level = this.pendingLevel\n  this.tokens.push(token)\n  this.pending = ''\n  return token\n}\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending()\n  }\n\n  const token = new Token(type, tag, nesting)\n  let token_meta = null\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--\n    this.delimiters = this._prev_delimiters.pop()\n  }\n\n  token.level = this.level\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++\n    this._prev_delimiters.push(this.delimiters)\n    this.delimiters = []\n    token_meta = { delimiters: this.delimiters }\n  }\n\n  this.pendingLevel = this.level\n  this.tokens.push(token)\n  this.tokens_meta.push(token_meta)\n  return token\n}\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  const max = this.posMax\n  const marker = this.src.charCodeAt(start)\n\n  // treat beginning of the line as a whitespace\n  const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20\n\n  let pos = start\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++ }\n\n  const count = pos - start\n\n  // treat end of the line as a whitespace\n  const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20\n\n  const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar))\n  const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar))\n\n  const isLastWhiteSpace = isWhiteSpace(lastChar)\n  const isNextWhiteSpace = isWhiteSpace(nextChar)\n\n  const left_flanking =\n    !isNextWhiteSpace && (!isNextPunctChar || isLastWhiteSpace || isLastPunctChar)\n  const right_flanking =\n    !isLastWhiteSpace && (!isLastPunctChar || isNextWhiteSpace || isNextPunctChar)\n\n  const can_open  = left_flanking  && (canSplitWord || !right_flanking || isLastPunctChar)\n  const can_close = right_flanking && (canSplitWord || !left_flanking  || isNextPunctChar)\n\n  return { can_open, can_close, length: count }\n}\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token\n\nexport default StateInline\n",
      "start": 1711658792333,
      "end": 1711658792359,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711658792359,
      "end": 1711658792359,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711658792359,
      "end": 1711658792360,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711658792360,
      "end": 1711658792360,
      "order": "normal"
    }
  ]
}

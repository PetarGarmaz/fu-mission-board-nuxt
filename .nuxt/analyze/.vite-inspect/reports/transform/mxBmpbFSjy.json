{
  "resolvedId": "D:/Projects/Web Dev/fu-mission-board-nuxt/node_modules/entities/lib/esm/encode.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import htmlTrie from \"./generated/encode-html.js\";\nimport { xmlReplacer, getCodePoint } from \"./escape.js\";\nconst htmlReplacer = /[\\t\\n!-,./:-@[-`\\f{-}$\\x80-\\uFFFF]/g;\n/**\n * Encodes all characters in the input using HTML entities. This includes\n * characters that are valid ASCII characters in HTML documents, such as `#`.\n *\n * To get a more compact output, consider using the `encodeNonAsciiHTML`\n * function, which will only encode characters that are not valid in HTML\n * documents, as well as non-ASCII characters.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\nexport function encodeHTML(data) {\n    return encodeHTMLTrieRe(htmlReplacer, data);\n}\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities. This function will not encode characters that\n * are valid in HTML documents, such as `#`.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\nexport function encodeNonAsciiHTML(data) {\n    return encodeHTMLTrieRe(xmlReplacer, data);\n}\nfunction encodeHTMLTrieRe(regExp, str) {\n    let ret = \"\";\n    let lastIdx = 0;\n    let match;\n    while ((match = regExp.exec(str)) !== null) {\n        const i = match.index;\n        ret += str.substring(lastIdx, i);\n        const char = str.charCodeAt(i);\n        let next = htmlTrie.get(char);\n        if (typeof next === \"object\") {\n            // We are in a branch. Try to match the next char.\n            if (i + 1 < str.length) {\n                const nextChar = str.charCodeAt(i + 1);\n                const value = typeof next.n === \"number\"\n                    ? next.n === nextChar\n                        ? next.o\n                        : undefined\n                    : next.n.get(nextChar);\n                if (value !== undefined) {\n                    ret += value;\n                    lastIdx = regExp.lastIndex += 1;\n                    continue;\n                }\n            }\n            next = next.v;\n        }\n        // We might have a tree node without a value; skip and use a numeric entity.\n        if (next !== undefined) {\n            ret += next;\n            lastIdx = i + 1;\n        }\n        else {\n            const cp = getCodePoint(str, i);\n            ret += `&#x${cp.toString(16)};`;\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = regExp.lastIndex += Number(cp !== char);\n        }\n    }\n    return ret + str.substr(lastIdx);\n}\n//# sourceMappingURL=encode.js.map",
      "start": 1711659332450,
      "end": 1711659332483,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711659332483,
      "end": 1711659332483,
      "order": "normal"
    }
  ]
}

{
  "resolvedId": "D:/Projects/Web Dev/fu-mission-board-nuxt/node_modules/markdown-it/lib/rules_inline/link.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Process [link](<to> \"stuff\")\n\nimport { normalizeReference, isSpace } from '../common/utils.mjs'\n\nexport default function link (state, silent) {\n  let code, label, res, ref\n  let href = ''\n  let title = ''\n  let start = state.pos\n  let parseReference = true\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false }\n\n  const oldPos = state.pos\n  const max = state.posMax\n  const labelStart = state.pos + 1\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true)\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false }\n\n  let pos = labelEnd + 1\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n    if (pos >= max) { return false }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str)\n      if (state.md.validateLink(href)) {\n        pos = res.pos\n      } else {\n        href = ''\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos)\n        if (!isSpace(code) && code !== 0x0A) { break }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str\n        pos = res.pos\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos)\n          if (!isSpace(code) && code !== 0x0A) { break }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true\n    }\n    pos++\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1\n      pos = state.md.helpers.parseLinkLabel(state, pos)\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++)\n      } else {\n        pos = labelEnd + 1\n      }\n    } else {\n      pos = labelEnd + 1\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd) }\n\n    ref = state.env.references[normalizeReference(label)]\n    if (!ref) {\n      state.pos = oldPos\n      return false\n    }\n    href = ref.href\n    title = ref.title\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart\n    state.posMax = labelEnd\n\n    const token_o = state.push('link_open', 'a', 1)\n    const attrs = [['href', href]]\n    token_o.attrs  = attrs\n    if (title) {\n      attrs.push(['title', title])\n    }\n\n    state.linkLevel++\n    state.md.inline.tokenize(state)\n    state.linkLevel--\n\n    state.push('link_close', 'a', -1)\n  }\n\n  state.pos = pos\n  state.posMax = max\n  return true\n}\n",
      "start": 1711660237083,
      "end": 1711660237109,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711660237109,
      "end": 1711660237109,
      "order": "normal"
    }
  ]
}

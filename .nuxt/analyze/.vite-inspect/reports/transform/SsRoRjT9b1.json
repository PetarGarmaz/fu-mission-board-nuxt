{
  "resolvedId": "D:/Projects/Web Dev/fu-mission-board-nuxt/node_modules/mdurl/lib/encode.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "const encodeCache = {}\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache (exclude) {\n  let cache = encodeCache[exclude]\n  if (cache) { return cache }\n\n  cache = encodeCache[exclude] = []\n\n  for (let i = 0; i < 128; i++) {\n    const ch = String.fromCharCode(i)\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch)\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2))\n    }\n  }\n\n  for (let i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i]\n  }\n\n  return cache\n}\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode (string, exclude, keepEscaped) {\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped = exclude\n    exclude = encode.defaultChars\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true\n  }\n\n  const cache = getEncodeCache(exclude)\n  let result = ''\n\n  for (let i = 0, l = string.length; i < l; i++) {\n    const code = string.charCodeAt(i)\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3)\n        i += 2\n        continue\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code]\n      continue\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        const nextCode = string.charCodeAt(i + 1)\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1])\n          i++\n          continue\n        }\n      }\n      result += '%EF%BF%BD'\n      continue\n    }\n\n    result += encodeURIComponent(string[i])\n  }\n\n  return result\n}\n\nencode.defaultChars = \";/?:@&=+$,-_.!~*'()#\"\nencode.componentChars = \"-_.!~*'()\"\n\nexport default encode\n",
      "start": 1711660237099,
      "end": 1711660237123,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711660237123,
      "end": 1711660237123,
      "order": "normal"
    }
  ]
}

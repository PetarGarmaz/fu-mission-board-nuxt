{
  "resolvedId": "D:/Projects/Web Dev/fu-mission-board-nuxt/node_modules/markdown-it/lib/rules_core/replacements.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - multiplications 2 x 4 -> 2 × 4\n\nconst RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nconst SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i\n\nconst SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig\nconst SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  tm: '™'\n}\n\nfunction replaceFn (match, name) {\n  return SCOPED_ABBR[name.toLowerCase()]\n}\n\nfunction replace_scoped (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn)\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nfunction replace_rare (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013')\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nexport default function replace (state) {\n  let blkIdx\n\n  if (!state.md.options.typographer) { return }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') { continue }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children)\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children)\n    }\n  }\n}\n",
      "start": 1711660237058,
      "end": 1711660237081,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711660237081,
      "end": 1711660237081,
      "order": "normal"
    }
  ]
}
